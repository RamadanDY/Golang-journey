package main

import "fmt"

func main() {
	// these are the two ways of  naming variables in go
	var nameOf = "Gaza"
	mylast := "RAmadan"
	fmt.Println("welcome to our todo list app ")
	fmt.Println(nameOf)
	fmt.Println(mylast)

}




    int- stores integers (whole numbers), such as 123 or -123
    float32- stores floating point numbers, with decimals, such as 19.99 or -19.99
    string - stores text, such as "Hello World". String values are surrounded by double quotes
    bool- stores values with two states: true or false


With the var keyword:

Use the var keyword, followed by variable name and type:
Syntax
var variablename type = value

Note: You always have to specify either type or value (or both).





 With the := sign:

Use the := sign, followed by the variable value:
Syntax
variablename := value

Note: In this case, the type of the variable is inferred from the value (means that the compiler decides the type of the variable, based on the value).


Variable Declaration With Initial Value

If the value of a variable is known from the start, you can declare the variable and assign a value to it on one line:
Example
package main
import ("fmt")

func main() {
  var student1 string = "John" //type is string
  var student2 = "Jane" //type is inferred
  x := 2 //type is inferred

  fmt.Println(student1)
  fmt.Println(student2)
  fmt.Println(x)
}
Note: The variable types of student2 and x is inferred from their values.

















Variable Declaration Without Initial Value

In Go, all variables are initialized. So, if you declare a variable without an initial value, its value will be set to the default value of its type:
Example
package main
import ("fmt")

func main() {
  var a string
  var b int
  var c bool

  fmt.Println(a)
  fmt.Println(b)
  fmt.Println(c)
}


we now assign a value to it 

package main

import (
	"fmt"
)

func main() {
	var a string
	var b int
	var c bool
	a = "Ramadan"
	b = 23
	c = true

	fmt.Println(a)
	fmt.Println(b)
	fmt.Println(c)
}
